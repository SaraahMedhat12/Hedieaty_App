import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import '../controllers/gift_controller.dart';
import '../controllers/gift_details_controller.dart';
import '../service/auth_service.dart';
import '../models/gift.dart';
import '../service/auth_service.dart';

class GiftDetailsPage extends StatefulWidget {
  final String eventId;
  final Map<String, dynamic>? existingGift;
  final String autogeneratedId;

  const GiftDetailsPage({
    Key? key,
    required this.eventId,
    required this.autogeneratedId,
    this.existingGift,
  }) : super(key: key);

  @override
  _GiftDetailsPageState createState() => _GiftDetailsPageState();
}

class _GiftDetailsPageState extends State<GiftDetailsPage> {
  final GiftDetailsController _controller = GiftDetailsController();
  final GiftController _giftController = GiftController();
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  late TextEditingController nameController;
  late TextEditingController categoryController;
  late TextEditingController descriptionController;
  late TextEditingController priceController;


  String _selectedEventId = '';
  List<Map<String, dynamic>> _events = [];
  String _selectedStatus = 'Available';
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadEvents();
    print("Navigated to GiftDetailsPage with:");
    print("Event ID: ${widget.eventId}");
    print("Existing Gift: ${widget.existingGift}");
    print("Gift ID: ${widget.autogeneratedId}");
    _initializeForm();
  }

  Future<void> _loadEvents() async {
    final userId = AuthService.getCurrentUser()?.uid;
    if (userId != null) {
      final events = await _giftController.loadEventsForUser(userId);
      setState(() {
        _events = events;
        if (widget.eventId.isNotEmpty) _selectedEventId = widget.eventId;
        _isLoading = false;
      });
    }
  }

  void _initializeForm() {
    if (widget.existingGift != null) {
      _controller.giftNameController.text = widget.existingGift!['name'] ?? '';
      _controller.categoryController.text = widget.existingGift!['category'] ?? '';
      _controller.descriptionController.text = widget.existingGift!['description'] ?? '';
      _controller.priceController.text = widget.existingGift!['price']?.toString() ?? '0.0';
      _selectedStatus = widget.existingGift!['status'] ?? 'Available';
    } else {
      // Set default values for a new gift
      _controller.giftNameController.text = '';
      _controller.categoryController.text = '';
      _controller.descriptionController.text = '';
      _controller.priceController.text = '';
      _selectedStatus = 'Available';
    }
  }


  Future<void> editGift({
    required String eventId,
    required String giftId,
    required Map<String, dynamic> updatedGiftData,
  }) async {
    final currentUser = FirebaseAuth.instance.currentUser;

    try {
      if (currentUser != null) {
        final firestore = FirebaseFirestore.instance;

        // Firestore reference
        final giftDocRef = firestore
            .collection('users')
            .doc(currentUser.uid) // Current user's ID
            .collection('events')
            .doc(eventId)
            .collection('gifts')
            .doc(giftId);

        // Check if the document exists
        final giftSnapshot = await giftDocRef.get();
        if (giftSnapshot.exists) {
          // Update the gift document
          await giftDocRef.update(updatedGiftData);
          print("Gift updated successfully: $giftId");
        } else {
          print("Error: Gift document not found. Path: users/${currentUser.uid}/events/$eventId/gifts/$giftId");
          throw Exception("Gift document not found.");
        }
      } else {
        throw Exception("No authenticated user found.");
      }
    } catch (e) {
      print("Error editing gift: $e");
      rethrow;
    }
  }



  void _saveGift() async {
    if (_formKey.currentState!.validate()) {
      // Handle eventId fallback
      final String eventId = widget.eventId.isNotEmpty ? widget.eventId : "unknown_event";

      final String name = _controller.giftNameController.text.trim().isNotEmpty
          ? _controller.giftNameController.text.trim()
          : "Unnamed Gift";

      final String category = _controller.categoryController.text.trim().isNotEmpty
          ? _controller.categoryController.text.trim()
          : "No Category";

      final String description = _controller.descriptionController.text.trim().isNotEmpty
          ? _controller.descriptionController.text.trim()
          : "No Description";

      final double price = double.tryParse(_controller.priceController.text.trim()) ?? 0.0;

      final String status = _selectedStatus.isNotEmpty ? _selectedStatus : "Available";

      // Fixed line 123: Generate a valid giftId
      final String giftId = widget.existingGift != null && widget.existingGift!['id'] != null
          ? widget.existingGift!['id'] as String
          : FirebaseFirestore.instance.collection('gifts').doc().id;

      final newGift = Gift(
        id: giftId,
        name: name,
        category: category,
        description: description,
        price: price,
        status: status,
        isPledged: widget.existingGift?.isPledged ?? false,
        eventId: eventId,
      );

      try {
        if (widget.existingGift != null) {
          await _giftController.updateGiftInEvent(eventId, newGift);
          print("Gift updated successfully!");
        } else {
          await _giftController.addGiftToEvent(eventId, newGift);
          print("Gift added successfully!");
        }

        Navigator.pop(context, true); // Refresh the list and go back
      } catch (e) {
        print("Error saving gift: $e");
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Failed to save the gift. Please try again.")),
        );
      }
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Please fill all fields and select an event.")),
      );
    }
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.existingGift != null ? "Edit Gift" : "Add New Gift"),
        backgroundColor: Colors.brown,
        foregroundColor: Colors.white,
      ),
      body: Stack(
        children: [
          Container(
            decoration: BoxDecoration(
              image: DecorationImage(
                image: AssetImage('assets/bg5.jpeg'),
                fit: BoxFit.cover,
              ),
            ),
          ),
          SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Container(
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.brown, width: 2),
                  borderRadius: BorderRadius.circular(8),
                  color: Colors.white.withOpacity(0.8),
                ),
                child: Form(
                  key: _formKey,
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('Event Name', style: _formLabelStyle),
                        _isLoading
                            ? Center(child: CircularProgressIndicator())
                            : DropdownButtonFormField<String>(
                          value: _selectedEventId.isNotEmpty
                              ? _selectedEventId
                              : null,
                          decoration: InputDecoration(),
                          items: _events.map((event) {
                            return DropdownMenuItem<String>(
                              value: event['id'],
                              child: Text(event['name']),
                            );
                          }).toList(),
                          onChanged: (value) {
                            setState(() {
                              _selectedEventId = value!;
                            });
                          },
                          validator: (value) =>
                          value == null ? 'Please select an event' : null,
                        ),
                        SizedBox(height: 10),
                        _buildTextField('Gift Name', _controller.giftNameController),
                        _buildTextField('Description', _controller.descriptionController),
                        _buildTextField('Category', _controller.categoryController),
                        _buildTextField('Price', _controller.priceController,
                            isNumeric: true),
                        SizedBox(height: 10),
                        Text('Status', style: _formLabelStyle),
                        DropdownButtonFormField<String>(
                          value: _selectedStatus,
                          decoration: InputDecoration(),
                          items: ['Available', 'Pledged'].map((String value) {
                            return DropdownMenuItem<String>(
                              value: value,
                              child: Text(value),
                            );
                          }).toList(),
                          onChanged: (String? newValue) {
                            setState(() {
                              _selectedStatus = newValue!;
                            });
                          },
                        ),
                        SizedBox(height: 20),
                        Center(
                          child: SizedBox(
                            width: double.infinity,
                            child: ElevatedButton(
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.brown,
                                foregroundColor: Colors.white,
                              ),
                              onPressed: _saveGift,
                              child: Text('Save Gift'),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  TextStyle get _formLabelStyle => TextStyle(
    color: Colors.black,
    fontWeight: FontWeight.bold,
    fontSize: 14,
  );

  Widget _buildTextField(String label, TextEditingController controller,
      {bool isNumeric = false}) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label, style: _formLabelStyle),
        TextFormField(
          controller: controller,
          keyboardType: isNumeric ? TextInputType.number : TextInputType.text,
          decoration: InputDecoration(),
          validator: (value) => value!.isEmpty ? 'Please enter $label' : null,
        ),
        SizedBox(height: 10),
      ],
    );
  }
}

extension on Map<String, dynamic>? {
  get isPledged => null;
}

extension on Map<String, dynamic> {
  get id => null;
}
